// Copyright (C) 2025 CypherGoat
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package views

import (
    "fmt"
    "github.com/CypherGoat/web/cmd/api"
    "strings"
    "strconv"
)

func FormatFloat(num float64) string {
    str := strconv.FormatFloat(num, 'f', -1, 64)
    
    if !strings.Contains(str, ".") {
        return str + ".0"
    }
    
    return str
}

func FormatCoveragePercent(num float64) string {
    // Round to 1 decimal place
    rounded := strconv.FormatFloat(num, 'f', 1, 64)
    return rounded
}


templ EstimateCard(offers api.Estimates) {
     <style>
        body-estimates {
            background-color: #121520;
            font-family: 'Inter', 'Segoe UI', 'Arial', sans-serif;
        }

        .container-estimates {
            max-width: 700px;
            margin: 0 auto;
            padding: 1rem;
            color: #f5f5f5;
        }

        .card-estimates {
            background-color: #1a1f2e;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.05);
            margin-bottom: 1rem;
            display: grid;
            grid-template-columns: 1fr auto;
            grid-gap: 1rem;
        }

        .card-estimates:hover {
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.25);
            transform: translateY(-2px);
            border-color: rgba(255, 255, 255, 0.1);
        }

        .exchange-info-estimates {
            grid-column: 1 / -1;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
        }

        .exchange-name-estimates {
            font-size: 1.15rem;
            font-weight: 600;
            color: #ffffff;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            letter-spacing: 0.01em;
        }

        .estimate-image-estimates {
            width: 28px;
            height: 28px;
            object-fit: contain;
            border-radius: 4px;
        }

        .coin-symbols-estimates {
            color: #d0d0d0;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 0.6rem;
            grid-column: 1 / -1;
            margin: 0.5rem 0;
            padding: 0.4rem 0;
            border-top: 1px solid rgba(255, 255, 255, 0.05);
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
        }

        .coin-symbol-estimates {
            background: rgba(255, 255, 255, 0.1);
            padding: 0.3rem 0.7rem;
            border-radius: 6px;
            border: 1px solid rgba(255, 255, 255, 0.08);
            transition: all 0.2s ease;
            font-weight: 500;
        }

        .amount-highlight-estimates {
            font-size: 1.4rem;
            font-weight: 700;
            color: #ffffff;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
            letter-spacing: 0.01em;
        }

        .btn-select-estimates, .btn-select2-estimates {
            background-color: #2a3042;
            color: #fff;
            padding: 0.7rem 1.2rem;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            text-align: center;
            transition: all 0.2s ease;
            grid-column: 1 / -1;
            justify-self: end;
            min-width: 140px;
            letter-spacing: 0.02em;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .btn-select-estimates:hover, .btn-select2-estimates:hover {
            background-color: #353d52;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        .btn-primary-estimates {
            background-color: #0066cc;
            box-shadow: 0 2px 8px rgba(0, 102, 204, 0.25);
        }

        .btn-primary-estimates:hover {
            background-color: #0077e6;
            box-shadow: 0 4px 12px rgba(0, 102, 204, 0.35);
        }
        
        .btn-select2-estimates:active {
            transform: translateY(1px);
            box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1);
        }

        .kyc-badge-estimates {
            min-width: 24px;
            height: 24px;
            border-radius: 50%;
            font-size: 0.75rem;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            cursor: help;
            margin-left: 0.5rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
            position: relative;
        }
        
        .kyc-badge-estimates::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 130%;
            left: 50%;
            transform: translateX(-50%);
            background-color: #1a1f2e;
            color: white;
            padding: 0.5rem 0.75rem;
            border-radius: 6px;
            width: max-content;
            max-width: 200px;
            font-size: 0.75rem;
            opacity: 0;
            visibility: hidden;
            transition: all 0.2s ease;
            pointer-events: none;
            z-index: 100;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }
        
        .kyc-badge-estimates:hover::after {
            opacity: 1;
            visibility: visible;
        }
        
        .kyc-0-estimates {
            background-color: #1a9c51; 
            color: white;
        }

        .kyc-1-estimates {
            background-color: #4ca550; 
            color: white;
        }

        .kyc-2-estimates {
            background-color: #ffc107; 
            color: #333;
        }
        
        .sort-options-estimates {
            display: flex;
            justify-content: flex-end;
            margin-bottom: 1.5rem;
            gap: 0.75rem;
        }
        
        .sort-btn-estimates {
            background-color: #1a1f2e;
            color: #e0e0e0;
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 0.5rem 1rem;
            cursor: pointer;
            font-size: 0.85rem;
            transition: all 0.2s ease;
            font-weight: 500;
        }
        
        .sort-btn-estimates.active {
            background-color: rgba(0, 102, 204, 0.2);
            border-color: rgba(0, 102, 204, 0.4);
            color: #ffffff;
            box-shadow: 0 2px 6px rgba(0, 102, 204, 0.15);
        }
        
        .sort-btn-estimates:hover {
            background-color: #232838;
        }

        .kyc-badge-estimates {
            display: none;
        }

        .show-kyc-estimates .kyc-badge-estimates {
            display: inline-flex;
        }

        .estimate-details-estimates {
            display: flex;
            align-items: center;
            justify-content: space-between;
            grid-column: 1 / -1;
        }

        .exchange-meta-estimates {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .arrow-icon-estimates {
            color: #9fa3b8;
            font-size: 1rem;
            font-weight: bold;
        }

        .guarantee-badge-estimates {
            display: inline-flex;
            align-items: center;
            gap: 0.4rem;
            background: rgba(0, 153, 102, 0.15);
            border: 1px solid rgba(0, 153, 102, 0.3);
            color: #00cc88;
            padding: 0.3rem 0.6rem;
            border-radius: 6px;
            font-size: 0.8rem;
            font-weight: 500;
            margin-left: auto;
        }
        
        .no-guarantee-estimates {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.15);
            color: #a0a0a0;
        }
        
        .guarantee-icon-estimates {
            font-size: 0.9rem;
        }
        
        .exchange-features-estimates {
            display: flex;
            align-items: center;
            grid-column: 1 / -1;
            gap: 0.6rem;
            padding-top: 0.5rem;
            flex-wrap: wrap;
        }
        
        .feature-tag-estimates {
            font-size: 0.75rem;
            color: #d0d0d0;
            background: rgba(255, 255, 255, 0.08);
            padding: 0.2rem 0.5rem;
            border-radius: 4px;
            display: flex;
            align-items: center;
            gap: 0.3rem;
        }
        
        .feature-tag-estimates.kyc {
            background: rgba(26, 156, 81, 0.15);
            color: #2ecc71;
        }
        
        .feature-tag-estimates.log {
            background: rgba(255, 193, 7, 0.15);
            color: #ffc107;
        }

        @media (max-width: 768px) {
            .card-estimates {
                padding: 1.2rem;
                grid-gap: 0.8rem;
            }

            .amount-highlight-estimates {
                font-size: 1.25rem;
            }

            .exchange-name-estimates {
                font-size: 1.1rem;
            }
            
            .estimate-details-estimates {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .btn-select-estimates, .btn-select2-estimates {
                padding: 0.6rem 1rem;
                font-size: 0.9rem;
                min-width: 120px;
                align-self: stretch;
                width: 100%;
            }
            
            .guarantee-badge-estimates {
                font-size: 0.7rem;
                padding: 0.2rem 0.4rem;
            }
            
            .exchange-features-estimates {
                padding-top: 0.8rem;
            }
            
            .sort-options-estimates {
                justify-content: center;
                flex-wrap: wrap;
            }
            
            .sort-btn-estimates {
                flex-grow: 1;
                text-align: center;
            }
            
            .coin-symbols-estimates {
                flex-wrap: wrap;
            }
        }
        
        @media (max-width: 480px) {
            .container-estimates {
                padding: 0.5rem;
            }
            
            .card-estimates {
                padding: 1rem;
                grid-gap: 0.6rem;
                margin-bottom: 0.8rem;
            }
            
            .exchange-info-estimates {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }
            
            .exchange-name-estimates {
                font-size: 1rem;
            }
            
            .amount-highlight-estimates {
                font-size: 1.2rem;
            }
            
            .btn-select-estimates, .btn-select2-estimates {
                padding: 0.7rem 0.8rem;
                font-size: 0.9rem;
                min-height: 44px;
            }
            
            .feature-tag-estimates {
                font-size: 0.7rem;
                padding: 0.2rem 0.4rem;
            }
            
            .coin-symbol-estimates {
                padding: 0.3rem 0.5rem;
                font-size: 0.85rem;
            }
        }
                .guarantee-icon-estimates {
            font-size: 0.9rem;
            margin-right: 0.1rem;
            vertical-align: middle;
        }
        
        svg.guarantee-icon-estimates {
            width: 14px;
            height: 14px;
            stroke: #00cc88;
            margin-bottom: -2px;
        }

                    .guarantee-badge-estimates {
            display: inline-flex;
            align-items: center;
            gap: 0.4rem;
            background: rgba(0, 153, 102, 0.15);
            border: 1px solid rgba(0, 153, 102, 0.3);
            color: #00cc88;
            padding: 0.3rem 0.6rem;
            border-radius: 6px;
            font-size: 0.8rem;
            font-weight: 500;
            margin-left: auto;
            position: relative; /* For tooltip positioning */
            cursor: help;
        }
        
               .tooltip-content-estimates {
            position: absolute;
            bottom: 130%;
            right: 0;
            background-color: #1a1f2e;
            color: white;
            padding: 0.5rem 0.75rem;
            border-radius: 6px;
            width: max-content;
            max-width: 250px;
            font-size: 0.75rem;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.2s ease, visibility 0s linear 0.2s;
            z-index: 100;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            text-align: left;
            pointer-events: none;
        }
        
        /* Add invisible connector between badge and tooltip */
        .guarantee-badge-estimates::before {
            content: '';
            position: absolute;
            bottom: 100%;
            left: 0;
            right: 0;
            height: 15px; /* Create an invisible bridge to the tooltip */
            background: transparent;
        }
        
        .guarantee-badge-estimates:hover .tooltip-content-estimates {
            opacity: 1;
            visibility: visible;
            pointer-events: auto;
            transition-delay: 0s;
        }
        
        /* Keep tooltip visible while hovering over it */
        .tooltip-content-estimates:hover {
            opacity: 1;
            visibility: visible;
            pointer-events: auto;
        }
        
        /* Add significant delay before hiding */
        .guarantee-badge-estimates.tooltip-active .tooltip-content-estimates {
            opacity: 1;
            visibility: visible;
            pointer-events: auto;
        }
                .tooltip-content-estimates a {
            color: #00cc88;
            font-weight: 600;
            text-decoration: underline;
            border-radius: 4px;
            transition: all 0.2s ease;
            display: inline-block;
        }
        
        .tooltip-content-estimates a:hover {
            color: #00e699;
            box-shadow: 0 0 0 2px rgba(0, 204, 136, 0.1);
        }
    </style>
    <div class="container-estimates">
        <div class="sort-options-estimates">
            <button id="sort-rate-estimates" class="sort-btn-estimates active" type="button">Sort by Rate</button>
            <button id="sort-kyc-estimates" class="sort-btn-estimates" type="button">Sort by KYC</button>
        </div>

        
        <div id="estimates-container-estimates">
        <p>{offers.TradeValue_fiat}</p>
            for i, offer := range offers.Results {
                if !(offer.SendAmount == 0) {
                    <form method="GET" action="/step2" class="estimate-form-estimates" data-kyc={ fmt.Sprintf("%d", offer.KYCScore) } data-rate={ fmt.Sprintf("%f", offer.ReceiveAmount) } data-is-top={ fmt.Sprintf("%t", i == 0) }>
                        <input type="hidden" name="coin1" value={ offer.Coin1 }>
                        <input type="hidden" name="coin2" value={ offer.Coin2 }>
                        <input type="hidden" name="network1" value={ offer.Network1 }>
                        <input type="hidden" name="network2" value={ offer.Network2 }>
                        <input type="hidden" name="amount" value={ fmt.Sprintf("%f", offer.SendAmount) }>
                        <input type="hidden" name="receiveamount" value={ fmt.Sprintf("%v", offer.ReceiveAmount) }>
                        <input type="hidden" name="partner" value={ offer.ExchangeName }>


                        <div class="card-estimates">
                            <div class="exchange-info-estimates">
                                <div class="exchange-name-estimates">
                                    if offer.NoTextURL != "" {
                                        <img src={ offer.NoTextURL } alt={ offer.ExchangeName } class="estimate-image-estimates" loading="lazy" width="32" height="32">
                                    } else {
                                        <img src={ offer.ImageURL } alt={ offer.ExchangeName } class="estimate-image-estimates" loading="lazy" width="32" height="32">
                                    }
                                    { offer.ExchangeName }
                                    <span class={ fmt.Sprintf("kyc-badge-estimates kyc-%d-estimates", offer.KYCScore) } 
                                          data-tooltip={ fmt.Sprintf("KYC Level %d: %s", offer.KYCScore, LogText(offer.Log)) }>
                                        { fmt.Sprintf("%d", offer.KYCScore) }
                                    </span>
                                </div>
                                
                                

                                                                 if offer.CGShield{
                                     <div class="guarantee-badge-estimates">
                                        <svg class="guarantee-icon-estimates" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>
                                        </svg>
                                        Insured ({FormatCoveragePercent(offer.CoveragePercent)}%)
                                        <div class="tooltip-content-estimates">
                                            Insured under the CypherGoat Shield Program. Read more <a href="/cyphergoat-shield" target="_blank">here</a>.
                                        </div>
                                    </div>
                                } else {
                                    //  <div class="guarantee-badge-estimates no-guarantee-estimates">
                                    //     No Guarantee
                                    // </div>
                                }
                            </div>
                            
                            
                            <div class="estimate-details-estimates">
                                <div class="amount-highlight-estimates">
                                    { FormatFloat(offer.ReceiveAmount) } { strings.ToUpper(offer.Coin2) }
                                </div>
                                if i == 0 {
                                    <button class="btn-select2-estimates btn-primary-estimates" type="submit">Select</button>
                                } else {
                                    <button class="btn-select2-estimates" type="submit">Select</button>
                                }
                            </div>
                            
                            <div class="exchange-features-estimates">
                                if offer.KYCScore == 0 {
                                    <div class="feature-tag-estimates kyc" data-tooltip={ fmt.Sprintf("Exchange never asks for KYC. %s", LogText(offer.Log) ) }>
                                        <span>KYC Level 0</span>
                                    </div>
                                } else if offer.KYCScore == 1 {
                                    <div class="feature-tag-estimates kyc" data-tooltip={ fmt.Sprintf("Exchange may ask for KYC very rarely or never. %s", LogText(offer.Log)) }>
                                        <span>KYC Level 1</span>
                                    </div>
                                } else {
                                    <div class="feature-tag-estimates" data-tooltip={ fmt.Sprintf("Exchange may rarely ask for KYC. %s", LogText(offer.Log)) }>
                                        <span>KYC Level { offer.KYCScore }</span>
                                    </div>
                                }
                                
                                // if !offer.Log {
                                //     <div class="feature-tag-estimates">
                                //         <span>No IP logging</span>
                                //     </div>
                                // } else {
                                //     <div class="feature-tag-estimates log">
                                //         <span>IP logging</span>
                                //     </div>
                                // }
                            </div>
                        </div>
                    </form>
                }
            }
        </div>
    </div>
<script>
    (function() {
        const getSortPreference = () => sessionStorage.getItem('sortPreference') || 'rate';
        const setSortPreference = (pref) => sessionStorage.setItem('sortPreference', pref);
        
        function initSorting() {
            const sortBy = getSortPreference();
            updateActiveButton(sortBy);
            sortEstimates(sortBy, false); 
        }
        
        function updateActiveButton(sortBy) {
            document.querySelectorAll('.sort-btn-estimates').forEach(btn => {
                btn.classList.remove('active');
            });
            
            const buttonId = sortBy === 'kyc' ? 'sort-kyc-estimates' : 'sort-rate-estimates';
            const button = document.getElementById(buttonId);
            if (button) button.classList.add('active');
            
            const container = document.getElementById('estimates-container-estimates');
            if (sortBy === 'kyc') {
                container.classList.add('show-kyc-estimates');
            } else {
                container.classList.remove('show-kyc-estimates');
            }
        }
        
        document.querySelectorAll('.sort-btn-estimates').forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.preventDefault();
                const sortBy = this.id === 'sort-kyc-estimates' ? 'kyc' : 'rate';
                sortEstimates(sortBy, true); 
            });
        });
        
        function sortEstimates(sortBy, updateStorage) {
            if (updateStorage) {
                setSortPreference(sortBy);
            }
            
            updateActiveButton(sortBy);
            
            const container = document.getElementById('estimates-container-estimates');
            if (!container) return;
            
            const children = Array.from(container.children);
            const forms = children.filter(el => el.classList.contains('estimate-form-estimates'));
            
            while (container.firstChild) {
                container.removeChild(container.firstChild);
            }
            
            forms.sort((a, b) => {
                if (sortBy === 'kyc') {
                    return parseInt(a.dataset.kyc) - parseInt(b.dataset.kyc);
                } else {
                    return parseFloat(b.dataset.rate) - parseFloat(a.dataset.rate);
                }
            });
            
            forms.forEach((form, index) => {
                const button = form.querySelector('button');
                if (index === 0) {
                    button.className = 'btn-select2-estimates btn-primary-estimates';
                } else {
                    button.className = 'btn-select2-estimates';
                }
                
                container.appendChild(form);
                
                if (index < forms.length - 1) {
                    const br = document.createElement('br');
                    container.appendChild(br);
                }
            });
            document.dispatchEvent(new CustomEvent('estimatesSorted'));

        }
        
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initSorting);
        } else {
            initSorting();
        }
        
        document.addEventListener('htmx:afterSwap', function() {
            initSorting();
        });
    })();

    (function() {
        // Initialize existing sorting code...
        
        // Add tooltip behavior for guarantee badges
        function setupTooltips() {
            const badges = document.querySelectorAll('.guarantee-badge-estimates');
            
            badges.forEach(badge => {
                let tooltipTimer;
                
                badge.addEventListener('mouseenter', () => {
                    clearTimeout(tooltipTimer);
                    badge.classList.add('tooltip-active');
                });
                
                badge.addEventListener('mouseleave', () => {
                    tooltipTimer = setTimeout(() => {
                        badge.classList.remove('tooltip-active');
                    }, 1000); // 1 second delay before hiding tooltip
                });
                
                const tooltip = badge.querySelector('.tooltip-content-estimates');
                if (tooltip) {
                    tooltip.addEventListener('mouseenter', () => {
                        clearTimeout(tooltipTimer);
                        badge.classList.add('tooltip-active');
                    });
                    
                    tooltip.addEventListener('mouseleave', () => {
                        tooltipTimer = setTimeout(() => {
                            badge.classList.remove('tooltip-active');
                        }, 500);
                    });
                }
            });
        }
        
        // Call setup on page load
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', setupTooltips);
        } else {
            setupTooltips();
        }
        
        // Call setup after htmx swaps content
        document.addEventListener('htmx:afterSwap', setupTooltips);
        document.addEventListener('estimatesSorted', setupTooltips);
    })();
</script>
}

func LogText(log bool) string {
    if log {
        return "Exchange requires IP logging"
    }
    return "Exchange does not require IP logging"
}