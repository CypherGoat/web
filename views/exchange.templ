// Copyright (C) 2025 CypherGoat
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package views 

import (
    "strings"
    "fmt"
)

templ CoinExchangeScreen(coin string, coinName string) {
    @HeaderCustomTitle(fmt.Sprintf("Exchange %v (%v) at the best rate on the market", coinName, strings.ToUpper(coin))){}

                <style>
.rgb-effect {
    color: #0066cc;
    font-weight: 800;
}

@keyframes rgbAnimation {
    0% { background-position: 0% 0%; }
    50% { background-position: 100% 100%; }
    100% { background-position: 0% 0%; }
}

html, body {
    height: 100%;
    margin: 0;
    scroll-behavior: smooth;
}

body {
    background-color: #121520;
    font-family: 'Inter', 'Segoe UI', 'Arial', sans-serif;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

.main-content {
    flex-grow: 1;
}

footer {
    margin-top: auto;
}

.swap-form-section {
    display: block;
    width: 100%;
}

.container {
    max-width: 700px;
    height: auto;
    margin: 0 auto;
    padding: 1rem;
    color: #f5f5f5;
    align-items: center;
}

.container2 {
    max-width:90%;
    height: auto;
    margin: 2rem auto;
    padding: 1rem;
    color: #f5f5f5;
    align-items: center;
}

.container3 {
    max-width:70%;
    height: auto;
    margin: 2rem auto;
    padding: 1rem;
    color: #f5f5f5;
    align-items: center;
}

    .card {
        background: linear-gradient(145deg, #1a1f2e, #222633);
        border-radius: 16px;
        padding: 2rem;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3), 0 2px 6px rgba(0, 102, 204, 0.07);
        transition: box-shadow 0.3s ease, transform 0.3s ease;
        border: 1px solid rgba(255, 255, 255, 0.05);
    }

    .card:hover {
        box-shadow: 0 16px 48px rgba(0, 0, 0, 0.4), 0 3px 10px rgba(0, 102, 204, 0.1);
        transform: translateY(-2px);
    }

    .card h2 {
        color: #ffffff;
        font-size: 1.75rem;
        margin-bottom: 1.5rem;
        font-weight: 700;
        text-align: center;
    }

    .input-group {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
    }

    .input-group .form-label {
        color: #e0e0e0;
        font-weight: 600;
        font-size: 1.1rem;
        display: block;
        margin-bottom: 0.5rem;
    }

    .form-input {
        width: 150px;
        padding: 0.75rem;
        background-color: #1a1f2e;
        color: #e0e0e0;
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        font-size: 1rem;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    .form-input:focus {
        border-color: #0066cc;
        outline: none;
        box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.15);
    }

    .form-input:focus-visible {
        border-color: #0066cc;
        box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.15);
    }

    .searchable-dropdown {
        position: relative;
        flex: 1;
    }
    
    .searchable-dropdown input {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        background-color: #1a1f2e;
        color: #e0e0e0;
        font-size: 1rem;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
        background-size: 20px 20px;
        background-position: left 10px center;
        background-repeat: no-repeat;
        padding-left: 40px;
    }

    .searchable-dropdown input:focus {
        border-color: #0066cc;
        outline: none;
        box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.15);
    }

    .dropdown-options {
        position: absolute;
        top: calc(100% + 0.25rem);
        left: 0;
        width: 100%;
        max-height: 300px;
        overflow-y: auto;
        background: #222633;
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
        display: none;
        z-index: 10;
    }

    .dropdown-options div {
        padding: 0.75rem;
        display: flex;
        align-items: center;
        color: #e0e0e0;
        cursor: pointer;
        font-size: 1rem;
        transition: background 0.2s ease;
    }

    .dropdown-options div:hover {
        background: #2a3042;
    }

    .dropdown-options img {
        width: 20px;
        height: 20px;
        margin-right: 0.75rem;
    }

    .btn-primary {
        background: linear-gradient(135deg, #0088ff, #0055cc);
        color: #ffffff;
        padding: 0.75rem;
        border: none;
        border-radius: 12px;
        font-size: 1.1rem;
        font-weight: 700;
        cursor: pointer;
        width: 100%;
        transition: transform 0.2s ease, box-shadow 0.3s ease, background 0.3s ease;
        background-clip: padding-box;
        position: relative;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
        box-shadow: 0 4px 12px rgba(0, 102, 204, 0.25);
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(0, 102, 204, 0.35);
        background: linear-gradient(135deg, #0099ff, #0066dd);
    }

    .btn-primary:focus {
        outline: none;
        box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.3), 0 4px 12px rgba(0, 102, 204, 0.25);
    }

    .form-input.read-only {
        background-color: rgba(26, 31, 46, 0.5);
        color: #b0b0b0;
        cursor: not-allowed;
    }

    .spinner {
        border: 4px solid rgba(0, 102, 204, 0.1);
        border-radius: 50%;
        border-top: 4px solid #0066cc;
        width: 40px;
        height: 40px;
        animation: spin 0.8s linear infinite;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 9999;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .spinner-hidden {
        display: none;
    }

    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    input[type=number] {
        -moz-appearance: textfield;
    }

    .hidden {
        display: none !important;
    }

    #error-message {
        background-color: rgba(220, 53, 69, 0.9);
        backdrop-filter: blur(5px);
        border-left: 4px solid #dc3545;
    }

@media (max-width: 768px) {
    .dropdown-options {
        position: fixed;
        top: 10%;
                left: 50%;
        width: 90%;
        height: 80vh;
        max-height: none;
        overflow-y: scroll;
        z-index: 100;
        display: none;
        transform: translateX(-50%);
    }

    .dropdown-options div {
        font-size: 1.25rem;
        padding: 1rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    }

    .input-group {
        flex-direction: row;
        justify-content: space-between;
        gap: 0.75rem;
    }

    .input-group > div:first-child {
        width: 30%;
    }

    .input-group > div:last-child {
        width: 70%;
    }

    .form-input#amount,
    .form-input#estimated-amount {
        width: 100%;
    }

    .searchable-dropdown {
        width: 100%;
    }

    .form-input#dropdown-search-send,
    .form-input#dropdown-search-receive {
        width: 100%;
    }

    .card {
        padding: 1.5rem;
    }
}

.coin-selection-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(18, 21, 32, 0.95);
    backdrop-filter: blur(5px);
    display: flex;
    justify-content: center;
    align-items: flex-start;
    padding-top: 5%;
    z-index: 10000;
}

.modal-content {
    background: linear-gradient(145deg, #1a1f2e, #222633);
    padding: 2rem;
    border-radius: 16px;
    width: 90%;
    max-width: 600px;
    text-align: center;
    max-height: 80vh;
    overflow-y: auto;
    border: 1px solid rgba(255, 255, 255, 0.05);
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
}

.modal-content input {
    width: 100%;
    padding: 0.75rem 1rem 0.75rem 2.5rem;
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    background-color: #1a1f2e;
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="rgba(255,255,255,0.5)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>');
    background-repeat: no-repeat;
    background-position: 12px center;
    color: #e0e0e0;
    font-size: 1rem;
    max-height: 90vh;
    margin-bottom: 1rem;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

.modal-content input:focus {
    border-color: #0066cc;
    outline: none;
    box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.15);
}

.modal-options {
    max-height: 400px;
    overflow-y: auto;
    border-radius: 8px;
    border: 1px solid rgba(255, 255, 255, 0.05);
}

.modal-options div {
    padding: 0.75rem;
    display: flex;
    align-items: center;
    color: #e0e0e0;
    cursor: pointer;
    font-size: 1rem;
    transition: background 0.2s ease;
}

.modal-options div:hover {
    background: #2a3042;
}

.modal-options img {
    width: 20px;
    height: 20px;
    margin-right: 0.75rem;
}

.coin-header {
    text-align: center;
    margin-bottom: 2.5rem;
    padding: 0 1rem;
}

.coin-header h1 {
    font-size: clamp(1.75rem, 5vw, 2.5rem);
    font-weight: 800;
    background: linear-gradient(45deg, #0088ff, #0066cc, #0055cc);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    margin-bottom: 1rem;
    line-height: 1.2;
}

.coin-description {
    max-width: 800px;
    margin: 0 auto 2.5rem;
    padding: 1.75rem;
    background: rgba(26, 31, 46, 0.5);
    border-radius: 16px;
    text-align: left;
    border: 1px solid rgba(255, 255, 255, 0.05);
}

.advantages {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
    margin: 2rem 0;
}

.advantage-card {
    background: linear-gradient(145deg, #1e2438, #252c42);
    border-radius: 16px;
    padding: 2rem;
    text-align: center;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3), 0 1px 8px rgba(0, 85, 204, 0.08);
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    border: 1px solid rgba(255, 255, 255, 0.05);
    position: relative;
    overflow: hidden;
}

.advantage-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, #0088ff, #0055cc);
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 0.4s ease;
}

.advantage-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4), 0 2px 10px rgba(0, 85, 204, 0.1);
}

.advantage-card:hover::before {
    transform: scaleX(1);
}

.advantage-icon {
    display: flex;
    justify-content: center;
    margin-bottom: 1.5rem;
    height: 60px;
    align-items: center;
}

.advantage-card h3 {
    font-size: 1.4rem;
    font-weight: 700;
    margin-bottom: 1rem;
    background: linear-gradient(90deg, #ffffff, #e0e0e0);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}

.advantage-card p {
    font-size: 1.05rem;
    line-height: 1.6;
    color: #b0b8cd;
}

@media (max-width: 768px) {
    .advantages {
        grid-template-columns: 1fr;
        gap: 1.5rem;
    }
    
    .advantage-card {
        padding: 1.75rem;
    }
}

.faq-section {
    max-width: 900px;
    margin: 0 auto;
}

.faq-card {
    background: rgba(26, 31, 46, 0.5);
    border-radius: 12px;
    padding: 1.5rem;
    transition: transform 0.2s ease, box-shadow 0.3s ease;
    border: 1px solid rgba(255, 255, 255, 0.05);
}

.faq-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
}

@media (max-width: 768px) {
    .container2 {
        max-width: 100%;
        padding: 1rem;
    }
    
    .container3 {
        max-width: 100%;
        padding: 1rem;
    }
    
    .coin-description {
        padding: 1.25rem;
        margin-bottom: 2rem;
    }
    
    .advantages {
        gap: 1rem;
        margin: 1.5rem 0;
    }
    
    .advantage-card {
        padding: 1.25rem;
    }
    
    .faq-card {
        padding: 1.25rem;
    }
}
    </style>

    <div id="error-message" class="bg-red-500 text-white p-4 text-center hidden">
    <p id="error-text"></p>
</div>

    <div class="container2 mx-auto px-4 py-8">
        <div class="coin-header">
            <h1>Exchange {strings.ToUpper(coin)} at the Best Rate on the Market</h1>
            <p class="text-xl text-gray-300">Get the best {coinName} exchange rates with no KYC and lowest fees</p>
        </div>

 <div class="swap-form-section mt-4">
        <div class="container">
            <div class="card">
                <h1 class="hidden">Swap {coinName}</h1>
               <form id="swap-form" hx-get="/estimate" hx-target="#estimate-container" hx-swap="innerHTML">
    <div class="input-group">
        <div>
            <label for="amount" class="form-label">Amount</label>
            <input type="number" min="0" id="amount" name="amount" required step="any" class="form-input" autocomplete="off" placeholder="0.00">
        </div>
        <div class="searchable-dropdown">
            <label class="form-label">Send Coin</label>
            <input type="text" placeholder="Search coin to send..." id="dropdown-search-send" autocomplete="off">
            <div class="dropdown-options" id="dropdown-options-send"></div>
            <select id="crypto-send" name="coin1" required style="display: none;" autocomplete="off"></select>
        </div>
    </div>

    <div class="input-group">
        <div>
            <label for="estimated-amount" class="form-label">Estimated</label>
            <input type="text" id="estimated-amount" class="form-input read-only" placeholder="0.00" readonly>
        </div>
        <div class="searchable-dropdown">
            <label class="form-label">Receive Coin</label>
            <input type="text" placeholder="Search coin to receive..." id="dropdown-search-receive" autocomplete="off">
            <div class="dropdown-options" id="dropdown-options-receive"></div>
            <select id="crypto-receive" name="coin2" required style="display: none;" autocomplete="off"></select>
        </div>
    </div>

    <input type="hidden" id="network-send" name="network1">
    <input type="hidden" id="network-receive" name="network2">
    <button type="submit" class="btn-primary">Swap</button>
</form>

            </div>
        </div>

            <div id="loading-spinner" class="spinner spinner-hidden"></div>
            <div id="error-message" class="hidden">
                <p id="error-text"></p>
            </div>
            <div id="estimate-container"></div>
        </div>

        <div class="container3 mx-auto my-12">
            <h2 class="text-2xl font-bold mb-8 text-center">Why Choose Our {strings.ToUpper(coin)} Exchange</h2>
            <div class="advantages">
                <div class="advantage-card">
                    <div class="advantage-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 24 24" fill="none" stroke="url(#bolt-gradient)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <defs>
                                <linearGradient id="bolt-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                    <stop offset="0%" stop-color="#0088ff" />
                                    <stop offset="100%" stop-color="#0055cc" />
                                </linearGradient>
                            </defs>
                            <path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z"></path>
                        </svg>
                    </div>
                    <h3 class="text-xl font-bold mb-3">Instant {strings.ToUpper(coin)} Swap</h3>
                    <p class="text-gray-300">Exchange {strings.ToUpper(coin)} quickly with no waiting periods or complex verification processes. Get your assets in minutes.</p>
                </div>
                <div class="advantage-card">
                    <div class="advantage-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 24 24" fill="none" stroke="url(#rate-gradient)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <defs>
                                <linearGradient id="rate-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                    <stop offset="0%" stop-color="#0088ff" />
                                    <stop offset="100%" stop-color="#0055cc" />
                                </linearGradient>
                            </defs>
                            <circle cx="12" cy="12" r="10"></circle>
                            <path d="M16 8h-6.5a2.5 2.5 0 0 0 0 5h3a2.5 2.5 0 0 1 0 5H6"></path>
                            <line x1="12" y1="6" x2="12" y2="8"></line>
                            <line x1="12" y1="16" x2="12" y2="18"></line>
                        </svg>
                    </div>
                    <h3 class="text-xl font-bold mb-3">Best {strings.ToUpper(coin)} Rates</h3>
                    <p class="text-gray-300">Our algorithm compares rates across major exchanges in real-time to ensure you always get the most competitive {strings.ToUpper(coin)} exchange rate.</p>
                </div>
                <div class="advantage-card">
                    <div class="advantage-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 24 24" fill="none" stroke="url(#shield-gradient)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <defs>
                                <linearGradient id="shield-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                    <stop offset="0%" stop-color="#0088ff" />
                                    <stop offset="100%" stop-color="#0055cc" />
                                </linearGradient>
                            </defs>
                            <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>
                            <path d="M9 12l2 2 4-4"></path>
                        </svg>
                    </div>
                    <h3 class="text-xl font-bold mb-3">No KYC Required</h3>
                    <p class="text-gray-300">Exchange {coinName} ({strings.ToUpper(coin)}) privately without identity verification. Your financial privacy matters to us.</p>
                </div>
            </div>
        </div>

        <div class="faq-section mt-12 mb-16">
            <h2 class="text-2xl font-bold mb-6 text-center">Frequently Asked Questions</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div class="faq-card">
                    <h3 class="text-lg font-semibold mb-2">How long does a {strings.ToUpper(coin)} swap take?</h3>
                    <p class="text-gray-300">Most {strings.ToUpper(coin)} swaps are completed within 10-30 minutes, depending on network confirmation times and exchange processing.</p>
                </div>
                <div class="faq-card">
                    <h3 class="text-lg font-semibold mb-2">Is there a minimum amount to exchange?</h3>
<p class="text-gray-300">Yes, the minimum amount to exchange is approximately $5 worth of any cryptocurrency.</p>                </div>
                <div class="faq-card">
                    <h3 class="text-lg font-semibold mb-2">Are there any hidden fees?</h3>
                    <p class="text-gray-300">No hidden fees. The rate you see includes all exchange fees. You'll only pay network transaction fees which vary by blockchain.</p>
                </div>
                <div class="faq-card">
                    <h3 class="text-lg font-semibold mb-2">Is KYC required for {strings.ToUpper(coin)} swaps?</h3>
                    <p class="text-gray-300">CypherGoat prioritizes no-KYC exchanges, displaying KYC score for each option so you can choose exchanges that respect your privacy.</p>
                </div>
            </div>
        </div>
    </div>

    <div id="coin-selection-modal" class="coin-selection-modal hidden">
        <div class="modal-content">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-bold">Select Coin</h3>
                <button id="close-modal" class="text-gray-400 hover:text-white">&times;</button>
            </div>
            <input type="text" id="modal-search" placeholder="Search coin..." onkeyup="filterModalOptions()" autocomplete="off">
            <div id="modal-options" class="modal-options"></div>
        </div>
    </div>

    <script>


document.addEventListener('DOMContentLoaded', function() {
    const selectElementSend = document.getElementById('crypto-send');
    const selectElementReceive = document.getElementById('crypto-receive');
    
    function filterModalOptions() {
        const filter = document.getElementById('modal-search').value.toLowerCase();
        const options = document.getElementById('modal-options').getElementsByTagName('div');
        let found = false;

        Array.from(options).forEach(option => {
            const optionText = option.dataset.text.toLowerCase();
            option.style.display = optionText.includes(filter) ? 'flex' : 'none';
            found = found || option.style.display === 'flex';
        });
    }
    
    window.filterModalOptions = filterModalOptions;

    function updateNetworkFields(type, network) {
        if (type === 'send') {
            document.getElementById('network-send').value = network;
        } else if (type === 'receive') {
            document.getElementById('network-receive').value = network;
        }
    }

    function closeAllDropdowns() {
        document.getElementById('dropdown-options-send').style.display = 'none';
        document.getElementById('dropdown-options-receive').style.display = 'none';
    }

    function handleClickOutside(event) {
        const target = event.target;
        const isClickInsideSend = document.getElementById('dropdown-search-send').contains(target) ||
            document.getElementById('dropdown-options-send').contains(target);
        const isClickInsideReceive = document.getElementById('dropdown-search-receive').contains(target) ||
            document.getElementById('dropdown-options-receive').contains(target);

        if (!isClickInsideSend) {
            document.getElementById('dropdown-options-send').style.display = 'none';
        }

        if (!isClickInsideReceive) {
            document.getElementById('dropdown-options-receive').style.display = 'none';
        }
    }

    document.addEventListener('click', handleClickOutside);

    document.addEventListener('htmx:beforeRequest', function() {
        document.getElementById('loading-spinner').classList.remove('spinner-hidden');
        const errorMessage = document.getElementById('error-message');
        if (errorMessage) {
            errorMessage.classList.add('hidden');
        }
    });

   document.addEventListener('htmx:afterSwap', function() {
    document.getElementById('loading-spinner').classList.add('spinner-hidden');
    document.querySelectorAll('.hide-on-swap').forEach(element => {
        element.classList.add('hidden');
    });
    document.getElementById('faq-section').classList.add('hidden');
    
    updateEstimatedAmountFromFirstCard();
    
   document.addEventListener('DOMContentLoaded', function() {
    document.addEventListener('click', function(event) {
        if (event.target && (event.target.id === 'sort-rate' || event.target.id === 'sort-kyc')) {
            setTimeout(function() {
                document.dispatchEvent(new CustomEvent('estimatesSorted'));
            }, 50);
        }
    });
});
});


document.addEventListener('DOMContentLoaded', function() {
    const estimateContainer = document.getElementById('estimate-container');
    if (estimateContainer) {
        const observer = new MutationObserver(function() {
            setTimeout(updateEstimatedAmountFromFirstCard, 50);
        });
        
        observer.observe(estimateContainer, {
            childList: true,
            subtree: true
        });
    }
});

document.addEventListener('estimatesSorted', function() {
    updateEstimatedAmountFromFirstCard();
});

function updateEstimatedAmountFromFirstCard() {
    const estimateForms = document.querySelectorAll('.estimate-form');
    
    if (estimateForms && estimateForms.length > 0) {
        const firstForm = estimateForms[0];
        const amountElement = firstForm.querySelector('.amount-highlight');
        
        if (amountElement) {
            const estimatedAmount = amountElement.textContent.trim();
            const estimatedField = document.getElementById('estimated-amount');
            
            if (estimatedField) {
                estimatedField.value = estimatedAmount;
                estimatedField.dispatchEvent(new Event('change', { bubbles: true }));
                
                const currentValue = estimatedAmount;
                setTimeout(function() {
                    if (estimatedField.value !== currentValue) {
                        estimatedField.value = currentValue;
                    }
                }, 100);
            }
        }
    }
}

    document.addEventListener('htmx:responseError', function(event) {
        document.getElementById('loading-spinner').classList.add('spinner-hidden');
        const errorMessage = document.getElementById('error-message');
        const errorText = document.getElementById('error-text');
        
        if (errorMessage && errorText && event.detail.xhr.status === 500) {
            const errText = event.detail.xhr.responseText || 'An internal server error occurred.';
            errorText.innerHTML = errText;
            errorMessage.classList.remove('hidden');
        }
    });

    const modal = document.getElementById('coin-selection-modal');
    const modalSearch = document.getElementById('modal-search');
    const modalOptions = document.getElementById('modal-options');
    let currentSelectElement = null;

    function openModal(selectElement) {
        currentSelectElement = selectElement;
        modal.classList.remove('hidden');
        modalSearch.value = '';
        filterModalOptions();
        setTimeout(() => modalSearch.focus(), 0);
    }

    function closeModal() {
        modal.classList.add('hidden');
    }

    function createModalOptions(jsonData) {
        modalOptions.innerHTML = '';

        jsonData.forEach(item => {
            const displayText = item.network ? `${item.name} (${item.network.toUpperCase()})` : `${item.name}`;
            const displayTextWithTicker = `${displayText} (${item.ticker})`;

            const iconUrl = item.icon.startsWith('/') ? item.icon : `/${item.icon.replace(/^static\//, 'static/')}`;
            
            const optionDiv = document.createElement('div');
            optionDiv.innerHTML = `<img src="${iconUrl}" alt="${item.name} icon"> ${displayText}`;
            optionDiv.dataset.ticker = item.ticker;
            optionDiv.dataset.network = item.network;
            optionDiv.dataset.text = displayTextWithTicker;

            optionDiv.onclick = () => {
                currentSelectElement.value = item.ticker;
                const inputField = document.querySelector(`#dropdown-search-${currentSelectElement.id.split('-')[1]}`);
                inputField.value = displayText;
                inputField.style.backgroundImage = `url(${iconUrl})`;
                inputField.style.backgroundRepeat = 'no-repeat';
                inputField.style.backgroundPosition = 'left 10px center';
                inputField.style.paddingLeft = '40px';

                const selectElement = document.getElementById(`crypto-${currentSelectElement.id.split('-')[1]}`);
                selectElement.innerHTML = `<option value="${item.ticker}" selected>${displayText}</option>`;
                selectElement.classList.add('hidden');

                closeModal();
                updateNetworkFields(currentSelectElement.id.split('-')[1], item.network);
            };

            modalOptions.appendChild(optionDiv);
        });

        setDefaultCoins(jsonData);
    }

function setDefaultCoins(jsonData) {
    const defaultSendCoin = 'btc';
    
    const coinFromUrl = document.querySelector('h1').textContent.split(' ')[1].toLowerCase();
    
    const sendCoin = jsonData.find(item => item.ticker.toLowerCase() === defaultSendCoin);
    const receiveCoin = jsonData.find(item => item.ticker.toLowerCase() === coinFromUrl);
    
    if (sendCoin) {
        const sendDisplayText = sendCoin.network ? 
            `${sendCoin.name} (${sendCoin.network.toUpperCase()})` : 
            `${sendCoin.name}`;
        
        const sendIconUrl = sendCoin.icon.startsWith('/') ? sendCoin.icon : `/${sendCoin.icon.replace(/^static\//, 'static/')}`;
            
        const selectSend = document.getElementById('crypto-send');
        selectSend.value = sendCoin.ticker;
        
        let option = selectSend.querySelector(`option[value="${sendCoin.ticker}"]`);
        if (!option) {
            option = document.createElement('option');
            option.value = sendCoin.ticker;
            option.textContent = sendDisplayText;
            option.selected = true;
            selectSend.appendChild(option);
        } else {
            option.selected = true;
        }
            
        const sendInputField = document.getElementById('dropdown-search-send');
        sendInputField.value = sendDisplayText;
        sendInputField.style.backgroundImage = `url(${sendIconUrl})`;
        sendInputField.style.backgroundRepeat = 'no-repeat';
        sendInputField.style.backgroundPosition = 'left 10px center';
        sendInputField.style.paddingLeft = '40px';
        updateNetworkFields('send', sendCoin.network);
    }
    
    if (receiveCoin) {
        const receiveDisplayText = receiveCoin.network ? 
            `${receiveCoin.name} (${receiveCoin.network.toUpperCase()})` : 
            `${receiveCoin.name}`;
        
        const receiveIconUrl = receiveCoin.icon.startsWith('/') ? receiveCoin.icon : `/${receiveCoin.icon.replace(/^static\//, 'static/')}`;
            
        const selectReceive = document.getElementById('crypto-receive');
        selectReceive.value = receiveCoin.ticker;
        
        let option = selectReceive.querySelector(`option[value="${receiveCoin.ticker}"]`);
        if (!option) {
            option = document.createElement('option');
            option.value = receiveCoin.ticker;
            option.textContent = receiveDisplayText;
            option.selected = true;
            selectReceive.appendChild(option);
        } else {
            option.selected = true;
        }
            
        const receiveInputField = document.getElementById('dropdown-search-receive');
        receiveInputField.value = receiveDisplayText;
        receiveInputField.style.backgroundImage = `url(${receiveIconUrl})`;
        receiveInputField.style.backgroundRepeat = 'no-repeat';
        receiveInputField.style.backgroundPosition = 'left 10px center';
        receiveInputField.style.paddingLeft = '40px';
        updateNetworkFields('receive', receiveCoin.network);
    }
}

async function loadCoins() {
    try {
        const response = await fetch('/static/coins.json');
        const jsonData = await response.json();
        createModalOptions(jsonData);
    } catch (error) {
        console.error('Error loading coins:', error);
    }
}

    loadCoins();

    document.getElementById('dropdown-search-send').addEventListener('click', () => openModal(document.getElementById('crypto-send')));
    document.getElementById('dropdown-search-receive').addEventListener('click', () => openModal(document.getElementById('crypto-receive')));

    modalSearch.addEventListener('keyup', filterModalOptions);

    modal.addEventListener('click', (event) => {
        if (event.target === modal) {
            closeModal();
        }
    });

    document.getElementById('swap-form').addEventListener('submit', function() {
        document.getElementById('crypto-send').classList.remove('hidden');
        document.getElementById('crypto-receive').classList.remove('hidden');
    });

    document.getElementById('dropdown-search-send').setAttribute('readonly', true);
    document.getElementById('dropdown-search-receive').setAttribute('readonly', true);
});
</script>
    
    @Footer(){}
}